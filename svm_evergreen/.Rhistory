data$`2011`$`0`[[1]]
names(data$`2011`$`0`)
names(data$`2011`$`1`)
data$`2011`$`1`$POSIXtime
data$`2011`$`1`$max_load
data[[i]][[j]]$weekday
i=1
j=1
weekdays(data[[i]][[j]]$POSIXtime)
unclass(weekdays(data[[i]][[j]]$POSIXtime))
unclass(weekdays(data[[i]][[j]]$POSIXtime))
weekdays(data[[i]][[j]]$POSIXtime)
weekdays(data[[i]][[j]]$POSIXtime)
data[[i]][[j]]$POSIXtime
unclass(data[[i]][[j]]$POSIXtime)
unclass(weekdays(data[[i]][[j]]$POSIXtime))
unclass(factor(weekdays(data[[i]][[j]]$POSIXtime)))
unclass((data[[i]][[j]]$weekday)
)
model[[1]]
source("lsvm_local")
source("lsvm_local.R")
source("lsvm_local.R")
source("lsvm_local.R")
print("hi")
printf("hi")
lm
warning("hi")
summary()
summary
message("hi")
message("Print the average l1 loss of the model (24 hours respectively):")
for(i in 1:24){
print(sum(abs(result_test[[i]] / test[[i]]$l1 - 1)) / length(result_test[[i]]))
}
message("Print the average l1 loss of the model (24 hours respectively):")
for (i in 1:24) {
#divide data by hour
temp = rbind(data$`2011`[[i]],data$`2012`[[i]],data$`2013`[[i]],data$`2014`[[i]])
n = length(temp$max_load)
training[[i]] = data.frame(l1 = temp$max_load[8:n],
l0 = temp$max_load[7:(n - 1)],
l_6 = temp$max_load[1:(n - 7)],
t = temp$degree[8:n],
sat = temp$sat[8:n],
sun = temp$sun[8:n],
mon = temp$mon[8:n])
#train
min[[i]] = min(training[[i]]$l1)
max[[i]] = max(training[[i]]$l1)
training_n[[i]] = normalize(training[[i]],min[[i]],max[[i]])
model[[i]] = svm(
l1 ~ . ,
data = training_n[[i]],
epsilon = 0.001,
gamma = .5 / 7 ^ 2,
cost = 10
)
result_training[[i]] = denormalize(predict(model[[i]], training_n[[i]][-1]), min[[i]], max[[i]])
#print(sum(abs(result_training[[i]] / training[[i]]$l1 - 1)) / length(result_test[[i]]))
#test
temp = data$`2015`[[i]]
n = length(temp$max_load)
idxr = temp$POSIXtime[8:n]
test[[i]] = data.frame(l1 = temp$max_load[8:n],
l0 = temp$max_load[7:(n - 1)],
l_6 = temp$max_load[1:(n - 7)],
t = temp$degree[8:n],
sat = temp$sat[8:n],
sun = temp$sun[8:n],
mon = temp$mon[8:n])
test_n[[i]] = normalize(test[[i]],min[[i]],max[[i]])
result_test[[i]] = denormalize(predict(model[[i]], test_n[[i]][-1]), min[[i]], max[[i]])
print(sum(abs(result_test[[i]] / test[[i]]$l1 - 1)) / length(result_test[[i]]))
}
c(do.call(rbind, lapply(1:24, function(x) {
result_test[[x]]
})))
source("lsvm_local.R")
source("lsvm_local.R")
load("/Users/EvergreenFu/Google Drive/Activities/Fudan/ECGC/R_workspace/data/trained.RData")
rm(list=ls())
load("/Users/EvergreenFu/Google Drive/Activities/Fudan/ECGC/R_workspace/data/trained.RData")
source("lsvm_local.R")
source("lsvm_local.R")
source("lsvm_local.R")
source("lsvm_local.R")
idx
idxt
plot(result_t[idx], type = "l", lty = 2)
lines(test_t[idx], lty = 1)#very large plot, output as pic before viewing
training_t = c(do.call(rbind, lapply(1:24, function(x) {
training[[x]]$l1
})))
trainging_t
training_t
temp = rbind(data$`2011`[[i]],data$`2012`[[i]],data$`2013`[[i]],data$`2014`[[i]])
temp$hol
temp$hol
temp = rbind(data$`2011`[[i]],data$`2012`[[i]],data$`2013`[[i]],data$`2014`[[i]])
POSIXtime = temp$POSIXtime
load = temp$max_load
t = temp$degree
hol = temp$hol
temp
temp = rbind(data$`2011`[[i]],data$`2012`[[i]],data$`2013`[[i]],data$`2014`[[i]])
POSIXtime = temp$POSIXtime
load = temp$max_load
t = temp$degree
hol = temp$hol
write.csv(data.frame(POSIX),"train.csv")
write.csv(data.frame(POSIXtime,load,t,hol),"train.csv")
wh$POSIXtime[wh$POSIXtime$year <= 114]
wh$POSIXtime[wh$POSIXtime$year <= 115]
temp = wh$POSIXtime[wh$POSIXtime$year <= 114]
POSIXtime = temp$POSIXtime
load = temp$max_load
t = temp$degree
hol = temp$hol
write.csv(data.frame(POSIXtime,load,t,hol),"train.csv")
temp = wh[wh$POSIXtime$year <= 114,]
temp
POSIXtime = temp$POSIXtime
load = temp$max_load
t = temp$degree
hol = temp$hol
write.csv(data.frame(POSIXtime,load,t,hol),"train.csv")
temp = wh[wh$POSIXtime$year <= 114,]
POSIXtime = temp$POSIXtime
load = temp$max_load
t = temp$degree
hol = temp$hol == "小长假"
write.csv(data.frame(POSIXtime,load,t,hol),"train.csv")
temp = wh[wh$POSIXtime$year <= 114,]
POSIXtime = temp$POSIXtime
load = temp$max_load
t = temp$degree
hol = temp$hol == "小长假"
#write.csv(data.frame(POSIXtime,load,t,hol),"train.csv")
MODEL = lsvm(POSIXtime,load,t,hol)
source("lsvm.R")
MODEL$data
MODEL$training
MODEL$training_n
source("lsvm.R")
temp = wh[wh$POSIXtime$year <= 114,]
POSIXtime.train = temp$POSIXtime
load.train = temp$max_load
t.train = temp$degree
hol.train = temp$hol == "小长假"
#write.csv(data.frame(POSIXtime.train,load.train,t.train,hol.train),"train.csv")
MODEL = lsvm(POSIXtim.traine,load.train,t.train,hol.train)
temp = wh[wh$POSIXtime$year <= 114,]
POSIXtime.train = temp$POSIXtime
load.train = temp$max_load
t.train = temp$degree
hol.train = temp$hol == "小长假"
write.csv(data.frame(POSIXtime.train,load.train,t.train,hol.train),"train.csv")
MODEL = lsvm(POSIXtime.train,load.train,t.train,hol.train)
source("lsvm.R")
lpredict(MODEL,POSIXtime.test,load.test,t.test,hol.test,actual = c(0,load.test))
temp = wh[wh$POSIXtime$year == 115,]
POSIXtime.test = temp$POSIXtime
load.test = temp$max_load
t.test = temp$degree
hol.test = temp$hol == "小长假"
write.csv(data.frame(POSIXtime.test,load.test,t.test,hol.test),"test.csv")
lpredict(MODEL,POSIXtime.test,load.test,t.test,hol.test,actual = c(0,load.test))
#############################################
lpredict <- function(LSVM, time, load, t, hol, actual = NULL) {
##input time,load(24), t(1) ,'actual(24)' is optional, used for comparing the prediction
POSIXtime = as.POSIXlt(time)
#diff = as.difftime(-1,units = "days")
n = length(load)
l0 = load[n + (-23:0)]
l_6 = load[n - 24 * 6 + (-23:0)]
w = factor(
weekdays(POSIXtime),
levels = c(
"Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday"
)
)
test = vector("list", 24)
##test_n = vector("list", 24)
result_test = c()
for (j in 1:24) {
test[[j]] = data.frame(
l0 = l0[j],
l_6 = l_6[j],
t = t,
sat = w == 6,
sun = w == 7,
mon = w == 1,
hol = hol
)
##test_n[[j]] = normalize(test[[j]], LSVM$min[[j]], LSVM$max[[j]])
##result_test[j] = denormalize(predict(LSVM$model[[j]], test_n[[j]]), LSVM$min[[j]], LSVM$max[[j]])
result_test[j] = predict(LSVM$model[[j]], test[[j]])
}
plot(
result_test,
type = "l",
lty = 2,
xlab = paste("date:", time),
ylab = "load / MW"
)
if (!is.null(actual)) {
lines(actual)
message(paste("average error:", sum(abs(
result_test / actual - 1
)) / 24))
}
return(result_test)
}
temp = wh[wh$POSIXtime$year == 115,]
POSIXtime.test = temp$POSIXtime
load.test = temp$max_load
t.test = temp$degree
hol.test = temp$hol == "小长假"
write.csv(data.frame(POSIXtime.test,load.test,t.test,hol.test),"test.csv")
lpredict(MODEL,POSIXtime.test,load.test,t.test,hol.test,actual = c(0,load.test))
MODEL
MODEL$data
#########################################################
lsvm <- function(time, load, t, hol) {
POSIXtime = as.POSIXlt(time)
#initialize 24 svm models
data = vector("list", 24)
names(data) = paste(as.character(0:23), ":00:00", sep = "")
total = cbind.data.frame(POSIXtime, load, t, hol)
idxh = vector("list", 24)
training = vector("list", 24)
##training_n = vector("list", 24)
#result_training = vector("list", 24)
model = vector("list", 24)
for (j in 1:24) {
idxh[[j]] = POSIXtime$hour == j - 1
data[[j]] = total[idxh[[j]],]
data[[j]]$weekday = factor(
weekdays(data[[j]]$POSIXtime),
levels = c(
"Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday"
)
)
#data[[j]]$weekend = unclass(data[[j]]$weekday) >= 6
data[[j]]$sat = unclass(data[[j]]$weekday) == 6
data[[j]]$sun = unclass(data[[j]]$weekday) == 7
data[[j]]$mon = unclass(data[[j]]$weekday) == 1
#divide data by hour
temp = data[[j]]
n = length(temp$load)
training[[j]] = data.frame(
l1 = temp$load[8:n],
l0 = temp$load[7:(n - 1)],
l_6 = temp$load[1:(n - 7)],
t = temp$t[8:n],
sat = temp$sat[8:n],
sun = temp$sun[8:n],
mon = temp$mon[8:n],
hol = temp$hol[8:n]
)
#train
##min[[j]] = apply(training[[j]], 2, min)
##max[[j]] = apply(training[[j]], 2, max)
##training_n[[j]] = normalize(training[[j]], min[[j]], max[[j]])
model[[j]] = svm(
l1 ~ . ,
##data = training_n[[j]],
data = training[[j]],
epsilon = 0.001,
gamma = .5 / 7 ^ 2,
cost = 10
)
#result_training[[j]] = denormalize(predict(model[[j]], training_n[[j]][-1]), min, max)
#print(sum(abs(result_training[[j]] / training[[j]]$l1 - 1)) / length(result_test[[j]]))
}
return(
list(
data = data,
training = training,
##training_n = training_n,
model = model
##min = min,
##max = max
)
)
}
#############################################
lpredict <- function(LSVM, time, load, t, hol, actual = NULL) {
##input time,load(24), t(1) ,'actual(24)' is optional, used for comparing the prediction
POSIXtime = as.POSIXlt(time)
#diff = as.difftime(-1,units = "days")
n = length(load)
l0 = load[n + (-23:0)]
l_6 = load[n - 24 * 6 + (-23:0)]
w = factor(
weekdays(POSIXtime),
levels = c(
"Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday"
)
)
test = vector("list", 24)
##test_n = vector("list", 24)
result_test = c()
for (j in 1:24) {
test[[j]] = data.frame(
l0 = l0[j],
l_6 = l_6[j],
t = t,
sat = w == 6,
sun = w == 7,
mon = w == 1,
hol = hol
)
##test_n[[j]] = normalize(test[[j]], LSVM$min[[j]], LSVM$max[[j]])
##result_test[j] = denormalize(predict(LSVM$model[[j]], test_n[[j]]), LSVM$min[[j]], LSVM$max[[j]])
result_test[j] = predict(LSVM$model[[j]], test[[j]])
}
plot(
result_test,
type = "l",
lty = 2,
xlab = paste("date:", time),
ylab = "load / MW"
)
if (!is.null(actual)) {
lines(actual)
message(paste("average error:", sum(abs(
result_test / actual - 1
)) / 24))
}
return(result_test)
}
###########################
##if you don't want to run the code, just load the "LSVM" object from trained.RData
#load("data/trained.RData")
##otherwise,load form the previous file
temp = wh[wh$POSIXtime$year <= 114,]
POSIXtime.train = temp$POSIXtime
load.train = temp$max_load
t.train = temp$degree
hol.train = temp$hol == "小长假"
write.csv(data.frame(POSIXtime.train,load.train,t.train,hol.train),"train.csv")
MODEL = lsvm(POSIXtime.train,load.train,t.train,hol.train)
lpredict(MODEL,POSIXtime.train,load.train,t.train,hol.traintemp = wh[wh$POSIXtime$year == 115,]
temp = wh[wh$POSIXtime$year == 115,]
temp = wh[wh$POSIXtime$year == 115,]
n = length(temp$POSIXtime)
n
temp$hol == "小长假"[8:n]
(temp$hol == "小长假")[8:n]
#########################################################
lsvm <- function(time, load, t, hol) {
POSIXtime = as.POSIXlt(time)
#initialize 24 svm models
data = vector("list", 24)
names(data) = paste(as.character(0:23), ":00:00", sep = "")
total = cbind.data.frame(POSIXtime, load, t, hol)
idxh = vector("list", 24)
training = vector("list", 24)
##training_n = vector("list", 24)
#result_training = vector("list", 24)
model = vector("list", 24)
for (j in 1:24) {
idxh[[j]] = POSIXtime$hour == j - 1
data[[j]] = total[idxh[[j]],]
data[[j]]$weekday = factor(
weekdays(data[[j]]$POSIXtime),
levels = c(
"Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday"
)
)
#data[[j]]$weekend = unclass(data[[j]]$weekday) >= 6
data[[j]]$sat = unclass(data[[j]]$weekday) == 6
data[[j]]$sun = unclass(data[[j]]$weekday) == 7
data[[j]]$mon = unclass(data[[j]]$weekday) == 1
#divide data by hour
temp = data[[j]]
n = length(temp$load)
training[[j]] = data.frame(
l1 = temp$load[8:n],
l0 = temp$load[7:(n - 1)],
l_6 = temp$load[1:(n - 7)],
t = temp$t[8:n],
sat = temp$sat[8:n],
sun = temp$sun[8:n],
mon = temp$mon[8:n],
hol = temp$hol[8:n]
)
#train
##min[[j]] = apply(training[[j]], 2, min)
##max[[j]] = apply(training[[j]], 2, max)
##training_n[[j]] = normalize(training[[j]], min[[j]], max[[j]])
model[[j]] = svm(
l1 ~ . ,
##data = training_n[[j]],
data = training[[j]],
epsilon = 0.001,
gamma = .5 / 7 ^ 2,
cost = 10
)
#result_training[[j]] = denormalize(predict(model[[j]], training_n[[j]][-1]), min, max)
#print(sum(abs(result_training[[j]] / training[[j]]$l1 - 1)) / length(result_test[[j]]))
}
return(
list(
data = data,
training = training,
##training_n = training_n,
model = model
##min = min,
##max = max
)
)
}
#############################################
lpredict <- function(LSVM, time, load, t, hol, actual = NULL) {
##input time,load(24), t(1) ,'actual(24)' is optional, used for comparing the prediction
POSIXtime = as.POSIXlt(time)
#diff = as.difftime(-1,units = "days")
n = length(load)
l0 = load[n + (-23:0)]
l_6 = load[n - 24 * 6 + (-23:0)]
w = factor(
weekdays(POSIXtime),
levels = c(
"Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday"
)
)
test = vector("list", 24)
##test_n = vector("list", 24)
result_test = c()
for (j in 1:24) {
test[[j]] = data.frame(
l0 = l0[j],
l_6 = l_6[j],
t = t,
sat = w == 6,
sun = w == 7,
mon = w == 1,
hol = hol
)
##test_n[[j]] = normalize(test[[j]], LSVM$min[[j]], LSVM$max[[j]])
##result_test[j] = denormalize(predict(LSVM$model[[j]], test_n[[j]]), LSVM$min[[j]], LSVM$max[[j]])
result_test[j] = predict(LSVM$model[[j]], test[[j]])
}
plot(
result_test,
type = "l",
lty = 2,
xlab = paste("date:", time),
ylab = "load / MW"
)
if (!is.null(actual)) {
lines(actual)
message(paste("average error:", sum(abs(
result_test / actual - 1
)) / 24))
}
return(result_test)
}
###########################
##if you don't want to run the code, just load the "LSVM" object from trained.RData
#load("data/trained.RData")
##otherwise,load form the previous file
temp = wh[wh$POSIXtime$year <= 114,]
POSIXtime.train = temp$POSIXtime
load.train = temp$max_load
t.train = temp$degree
hol.train = temp$hol == "小长假"
write.csv(data.frame(POSIXtime.train,load.train,t.train,hol.train),"train.csv")
MODEL = lsvm(POSIXtime.train,load.train,t.train,hol.train)
temp = wh[wh$POSIXtime$year == 115,]
n = length(temp$POSIXtime)
POSIXtime.test = temp$POSIXtime[1:(n-7)]
load.test = temp$max_load[1:(n-7)]
t.test = temp$degree[8:n]
hol.test = (temp$hol == "小长假")[8:n]
write.csv(data.frame(POSIXtime.test,load.test,t.test,hol.test),"test.csv")
load.test_actural = temp$max_load[8:n]
lpredict(MODEL,POSIXtime.test,load.test,t.test,hol.test,actual = load.test_actural)
lpredict(MODEL,POSIXtime.train,load.train,t.train,hol.train)
